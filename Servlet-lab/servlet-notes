#Servlet原理
1. 浏览器请求一个资源， 如http://localhost:8080/Servlet-lab/servlet/HelloServlet
2. Tomcat寻找到WebApp Context, 即Servlet-lab
3. 寻找到Servlet-lab下面的资源：Servlet-lab根目录下的 静态资源可以直接访问
4. 寻找到Servlet-lab下面的资源：WEB-INF下的资源不能直接访问，需查询web.xml
5. 通过web.xml中的url-mapping（/servlet/HelloServlet)找到Servlet.
6. 如果Servlet实例不存在，Tomcat生成一个Servlet对象（HelloServlet)，并调用init（ServletConfig config)方法
7. 调用service方法，执行doGet, doPost方法
8. Tomcat关闭，调用servlet的 destroy方法

#Servlet特点
- 三种初始化方式，1)容器启动时装载<load-on-startup>1</load-on-startup>, 2)首次请求时装载， 3)修改后重新装载。
- Servlet装载后常驻内存
- init方式只执行一次

#JSP九大对象与Servlet方法的对应关系
1.out -----> response.getwriter()
2.request -----> service(request)
3.response -----> service(response)
4.session ------>  request.getsession(）
5.application ------> getServletContext()
6.exception ----->  Throwable
7.Page -----> this
8.PageContext -----> PageContext
9.Config -----> getServletConfig

#Servlet跳转路径
- 绝对路径： 放之四海而皆准的路径。有斜线
- 相对路径：相对于当前资源的路径。没有斜线

#1)JSP页面中路径设置
第一种情况：<a>标签超链接方式
1. 超链接跳转 - 相对路径 ：相对于现有资源位置，从现有JSP页面所处位置开始算，以下的JSP在WebRoot的下一级目标</h3>
<a href="../PathDemoServlet">超链接跳转 - 相对路径</a>

2. 超链接跳转 - 绝对路径 ：相对于主机根目录位置。一般通过Basepath或path来补齐
<a href="<%=path%>/PathDemoServlet">超链接跳转 - 绝对路径</a>
绝对路径的优点：不需要考虑现有资源所在位置

第二种情况：表单提交方式<form action="">
同第一种情况

#2)web.xml的路径配置
- url-pattern必须以斜线开头，否则会报错
- url-pattern表示的是本web.xml的项目根目录，即"项目名/url-pattern"

#3)Servlet跳转到jsp
第一种情况：重定向
//重定向绝对路径。/对应于主机名
/Servlet-lab/path/destination.jsp
response.sendRedirect(request.getContextPath() + "/path/destination.jsp");
//重定向相对路径。相对于目前资源
//response.sendRedirect("../path/destination.jsp");	

//请求转发-绝对路径。相对于当前ContextRoot
/request.getRequestDispatcher("/path/destination.jsp").forward(request, response);
//请求转发-相对路径。相对于当前资源。
request.getRequestDispatcher("../path/destination.jsp").forward(request, response);

第二中情况：请求转发